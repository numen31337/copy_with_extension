name: Run Tests
on:
  workflow_dispatch:
  push:
    branches:
      - master
  pull_request:
  schedule:
    - cron: "0 0 1 * *" # Run Monthly

jobs:
  run_tests:
    name: >-
      ${{ matrix.sdk == 'stable' && matrix.os == 'ubuntu-latest' &&
          format('Full Test Suite - Dart {0} - {1}', matrix.sdk, matrix.os) ||
          format('Run Tests - Dart {0} - {1}', matrix.sdk, matrix.os) }}
    timeout-minutes: 10
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
        working-directory: copy_with_extension_gen

    strategy:
      matrix:
        os:
          - macos-latest
          - ubuntu-latest
        sdk:
          - stable
          - beta

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Install Dart
        uses: dart-lang/setup-dart@v1
        with:
          sdk: ${{ matrix.sdk }}

      - name: Dart Info
        run: |
          dart --disable-analytics
          dart --version

      - name: Pub Get - copy_with_extension_gen
        run: dart pub get

      - name: Pub Get - copy_with_extension
        run: dart pub get
        working-directory: copy_with_extension

      - name: Execute build_runner
        run: dart run build_runner build --delete-conflicting-outputs

      - name: Analyze
        run: dart analyze ../copy_with_extension ../copy_with_extension_gen

      - name: Run tests
        run: dart test --reporter github

      - name: Check formatting
        run: dart format --set-exit-if-changed ../

      - name: Install coverage tools
        if: matrix.sdk == 'stable' && matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y lcov

      - name: Run tests with coverage
        if: matrix.sdk == 'stable' && matrix.os == 'ubuntu-latest'
        run: |
          dart run coverage:test_with_coverage --function-coverage --branch-coverage -- --reporter=github
          awk '
            /^SF:/ {print; brf=0; brh=0; next}
            /^BRDA:/ {brf++; split($0,a,","); if (a[4] != "-" && a[4] != "0") brh++; print; next}
            /^end_of_record/ {printf "BRF:%d\nBRH:%d\nend_of_record\n", brf, brh; next}
            {print}
          ' coverage/lcov.info > coverage/lcov.tmp
          mv coverage/lcov.tmp coverage/lcov.info
          summary=$(lcov --ignore-errors corrupt --rc branch_coverage=1 --rc check_data_consistency=0 --summary coverage/lcov.info)
          detail=$(lcov --ignore-errors corrupt --rc branch_coverage=1 --rc check_data_consistency=0 --list coverage/lcov.info | tail -n +2)
          uncovered=$(awk '
            /^SF:/{f=substr($0,4); next}
            /^FN:/{fn[$2]=$1; next}
            /^FNDA:0,/{split($0,a,","); printf "%s\t%s\tfunction %s not covered\n", f, fn[a[2]], a[2]; next}
            /^DA:[0-9]+,0$/{split($0,a,":|,"); printf "%s\t%s\tline not covered\n", f, a[2]}
          ' coverage/lcov.info)

          {
            echo '### Coverage Summary'
            echo
            echo '```'
            echo "$summary"
            echo '```'
            echo
            echo '```'
            echo "$detail"
            echo '```'
            echo
            echo '```'
            echo "$uncovered" | sed $'s/\t/: /g'
            echo '```'
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Check Outdated Packages - copy_with_extension_gen
        if: matrix.sdk == 'stable' && matrix.os == 'ubuntu-latest'
        run: |
          warning_msg=`dart pub outdated`
          warning_formatted=${warning_msg//$'\n'/}
          if [[ $warning_formatted =~ "constrained" ]]; then
            echo $warning_msg
            echo -n "::warning ::$warning_formatted"
          fi

      - name: Check Outdated Packages - copy_with_extension
        working-directory: copy_with_extension
        if: matrix.sdk == 'stable' && matrix.os == 'ubuntu-latest'
        run: |
          warning_msg=`dart pub outdated`
          warning_formatted=${warning_msg//$'\n'/}
          if [[ $warning_formatted =~ "constrained" ]]; then
            echo $warning_msg
            echo -n "::warning ::$warning_formatted"
          fi
      
      - name: Check Files Are in Sync
        if: matrix.sdk == 'stable' && matrix.os == 'ubuntu-latest'
        run: |
          cmp -s example/example.dart ../copy_with_extension/example/example.dart || (echo "::error ::File example.dart is out of sync" && exit 1)
          cmp -s LICENSE ../copy_with_extension/LICENSE || (echo "::error ::File LICENSE is out of sync" && exit 1)
          cmp -s CHANGELOG.md ../copy_with_extension/CHANGELOG.md || (echo "::warning ::File CHANGELOG.md is out of sync")

  package_score:
    needs: run_tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package: [copy_with_extension_gen, copy_with_extension]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false
        
      - name: Package score
        id: package_score
        uses: axel-op/dart-package-analyzer@v3
        with:
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          relativePath: ${{ matrix.package }}

      - name: Annotate package score
        if: ${{ steps.package_score.outputs.total < steps.package_score.outputs.total_max }}
        run: |
          msg="Package score for ${{ matrix.package }} is ${{ steps.package_score.outputs.total }}/${{ steps.package_score.outputs.total_max }}"
          echo "${msg}"
          echo "::warning ::${msg}"